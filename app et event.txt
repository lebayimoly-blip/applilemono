from flask import Flask, render_template, request, redirect, url_for, session
import sqlite3
import os


app = Flask(__name__)
app.secret_key = 'ton_secret_key'  # Remplace par une vraie cl√© secr√®te

# üì¶ Connexion √† la base
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# üîê Page de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password)).fetchone()
        conn.close()
        if user:
            session['admin'] = user['username']
            session['role'] = user['role']
            if session['role'] == 'agent':
                return redirect('/search')
            else:
                return redirect('/dashboard')
        else:
            return render_template('login.html', error="Identifiants incorrects")
    return render_template('login.html')

@app.route('/', methods=['GET', 'POST'])
def home():
    return redirect('/login')


# üìä Dashboard
@app.route('/dashboard')
def dashboard():
    if 'admin' not in session:
        return redirect('/')
    return render_template('dashboard.html')

# üöó Ajout de v√©hicule avec photo
@app.route('/add_vehicle', methods=['GET', 'POST'])
def add_vehicle():
    if 'admin' not in session:
        return redirect('/')
    message = None
    if request.method == 'POST':
        plate = request.form['plate']
        owner = request.form['owner']
        insurance_expiry = request.form['insurance_expiry']
        history = request.form.get('history', '')
        brand = request.form.get('brand', '')
        model = request.form.get('model', '')
        first_registration = request.form.get('first_registration', '')
        photo_file = request.files.get('photo')
        photo_filename = None
        if photo_file and photo_file.filename != '':
            photo_filename = f"{plate}_{photo_file.filename}"
            photo_path = os.path.join('static/uploads', photo_filename)
            photo_file.save(photo_path)
        try:
            conn = get_db_connection()
            conn.execute('''
                INSERT INTO vehicles (plate, owner, insurance_expiry, history, brand, model, first_registration, photo)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (plate, owner, insurance_expiry, history, brand, model, first_registration, photo_filename))
            conn.commit()
            conn.close()
            message = "‚úÖ V√©hicule ajout√© avec succ√®s."
        except sqlite3.IntegrityError:
            message = "‚ö†Ô∏è Plaque d√©j√† existante."
    return render_template('add_vehicle.html', message=message)

# üîç Fiche v√©hicule avec photo
@app.route('/vehicle/<plate>')
def vehicle_detail(plate):
    conn = get_db_connection()
    vehicle = conn.execute('SELECT * FROM vehicles WHERE plate = ?', (plate,)).fetchone()
    conn.close()
    if vehicle is None:
        return "V√©hicule introuvable", 404
    return render_template('vehicle_detail.html', vehicle=vehicle)

# üñºÔ∏è Modifier la photo du v√©hicule
@app.route('/vehicle/<plate>/edit_photo', methods=['GET', 'POST'])
def edit_vehicle_photo(plate):
    if 'admin' not in session:
        return redirect('/')
    conn = get_db_connection()
    vehicle = conn.execute('SELECT * FROM vehicles WHERE plate = ?', (plate,)).fetchone()
    if vehicle is None:
        conn.close()
        return "V√©hicule introuvable", 404
    message = None
    if request.method == 'POST':
        photo_file = request.files.get('photo')
        if photo_file and photo_file.filename != '':
            photo_filename = f"{plate}_{photo_file.filename}"
            photo_path = os.path.join('static/uploads', photo_filename)
            photo_file.save(photo_path)
            conn.execute('UPDATE vehicles SET photo = ? WHERE plate = ?', (photo_filename, plate))
            conn.commit()
            message = "‚úÖ Photo mise √† jour avec succ√®s."
    conn.close()
    return render_template('edit_photo.html', vehicle=vehicle, message=message)

# üì• Import Excel
@app.route('/import_excel', methods=['GET', 'POST'])
def import_excel():
    if 'admin' not in session or session['admin'] != "lebayi moly":
        return redirect('/')
    message = None
    duplicates = []
    format_errors = []
    expected_columns = ['plate', 'owner', 'insurance_expiry', 'history', 'brand', 'model', 'first_registration']
    if request.method == 'POST':
        file = request.files['excel_file']
        if file and file.filename.endswith('.xlsx'):
            try:
                df = pd.read_excel(file)
                if not all(col in df.columns for col in expected_columns):
                    missing = [col for col in expected_columns if col not in df.columns]
                    message = f"‚ö†Ô∏è Colonnes manquantes : {', '.join(missing)}"
                    return render_template('import_excel.html', message=message)
                internal_duplicates = df['plate'][df['plate'].duplicated()].tolist()
                if internal_duplicates:
                    format_errors.append(f"Plaques dupliqu√©es dans le fichier : {', '.join(internal_duplicates)}")
                for col in ['insurance_expiry', 'first_registration']:
                    if not pd.to_datetime(df[col], errors='coerce').notna().all():
                        format_errors.append(f"‚ö†Ô∏è Dates invalides dans la colonne '{col}'")
                if format_errors:
                    return render_template('import_excel.html', message="‚ö†Ô∏è Erreurs de format d√©tect√©es", format_errors=format_errors)
                conn = get_db_connection()
                existing_plates = [row['plate'] for row in conn.execute('SELECT plate FROM vehicles').fetchall()]
                for _, row in df.iterrows():
                    if row['plate'] in existing_plates:
                        duplicates.append(row['plate'])
                    else:
                        conn.execute('''
                            INSERT INTO vehicles (plate, owner, insurance_expiry, history, brand, model, first_registration)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            row['plate'], row['owner'], row['insurance_expiry'],
                            row.get('history', ''), row.get('brand', ''),
                            row.get('model', ''), row.get('first_registration', '')
                        ))
                conn.commit()
                conn.close()
                if duplicates:
                    message = f"‚ö†Ô∏è Importation partielle : plaques d√©j√† existantes : {', '.join(duplicates)}"
                else:
                    message = "‚úÖ Importation r√©ussie."
            except Exception as e:
                message = f"‚ö†Ô∏è Erreur lors de l'importation : {str(e)}"
        else:
            message = "‚ö†Ô∏è Format de fichier non support√©. Utilisez un fichier .xlsx"
    return render_template('import_excel.html', message=message, format_errors=format_errors, duplicates=duplicates)

# üìà Statistiques
@app.route('/admin/stats')
def admin_stats():
    if 'admin' not in session:
        return redirect('/')
    conn = get_db_connection()
    total_vehicles = conn.execute('SELECT COUNT(*) FROM vehicles').fetchone()[0]
    conn.close()
    return render_template('admin_stats.html', total_vehicles=total_vehicles)

# üîé Recherche
@app.route('/search', methods=['GET', 'POST'])
def search():
    if 'admin' not in session:
        return redirect('/')
    result = None
    if request.method == 'POST':
        plate = request.form.get('plate', '').strip().lower()
        conn = get_db_connection()
        result = conn.execute('SELECT * FROM vehicles WHERE LOWER(plate) = ?', (plate,)).fetchone()
        conn.close()
    return render_template('search.html', result=result)

# üë§ Ajout utilisateur
@app.route('/admin/add_user', methods=['GET', 'POST'])
def add_user():
    if session.get('role') != 'admin':
        return "‚õî Acc√®s r√©serv√© aux administrateurs"
    message = None
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        role = request.form.get('role')
        try:
            conn = get_db_connection()
            conn.execute('INSERT INTO users (username, password, role) VALUES (?, ?, ?)', (username, password, role))
            conn.commit()
            conn.close()
            message = "‚úÖ Utilisateur ajout√© avec succ√®s."
        except sqlite3.IntegrityError:
            message = "‚ö†Ô∏è Nom d'utilisateur d√©j√† existant."
    return render_template('add_user.html', message=message)

# üö™ D√©connexion
@app.route('/logout')
def logout():
    session.pop('admin', None)
    return redirect('/')

# üöÄ Lancement de l'app
if __name__ == '__main__':
    print("üöÄ Application Flask en cours de d√©marrage...")
    app.run(debug=True)










<!DOCTYPE html>
<html>
<head>
  <title>Ajouter un √©v√©nement</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <header>
    <h1>Ajouter un √©v√©nement pour {{ plate }}</h1>
  </header>

  <form method="post" enctype="multipart/form-data">
    <textarea name="comment" placeholder="Commentaire sur l'incident" rows="4" required></textarea>
    <input type="file" name="photo" accept="image/*">
    <button type="submit">Ajouter l'√©v√©nement</button>
  </form>

  {% if message %}
    <div class="results">
      <p>{{ message }}</p>
    </div>
  {% endif %}

  <a href="/search">Retour √† la recherche</a>
</body>
</html>
